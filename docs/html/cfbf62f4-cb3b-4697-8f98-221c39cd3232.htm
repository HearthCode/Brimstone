<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Contributing Code</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="cfbf62f4-cb3b-4697-8f98-221c39cd3232" /><meta name="Description" content="Everything you need to know in order to submit code to Brimstone." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Hearthstone Working Group<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="bbd3d95b-45e3-46e9-bd51-35ee4749d7b6.htm" title="Hearthstone Working Group" tocid="roottoc">Hearthstone Working Group</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="bbd3d95b-45e3-46e9-bd51-35ee4749d7b6.htm" title="Brimstone Developer Documentation" tocid="bbd3d95b-45e3-46e9-bd51-35ee4749d7b6">Brimstone Developer Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="8409d776-e34a-419c-ba67-1806ba9b985d.htm" title="Contributor Guide" tocid="8409d776-e34a-419c-ba67-1806ba9b985d">Contributor Guide</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="cfbf62f4-cb3b-4697-8f98-221c39cd3232.htm" title="Contributing Code" tocid="cfbf62f4-cb3b-4697-8f98-221c39cd3232">Contributing Code</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="64f4468c-70df-4827-b028-66d547ce7952.htm" title="Contributing Documentation" tocid="64f4468c-70df-4827-b028-66d547ce7952">Contributing Documentation</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="HearthSim" width="64" height="64" src="../icons/HearthSim.png" /></td><td class="titleColumn">Contributing Code</td></tr></table><span class="introStyle"></span> <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="summary"><p>Everything you need to know in order to submit code to Brimstone.</p></div><div class="introduction"><p>In this section:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#naming">Code naming conventions</a></li><li class="outlineSectionEntry"><a href="#formatting">Code formatting conventions</a></li><li class="outlineSectionEntry"><a href="#patterns">Brimstone design patterns</a></li><li class="outlineSectionEntry"><a href="#unittest">Running unit tests</a></li><li class="outlineSectionEntry"><a href="#profiling">Benchmarking and profiling</a></li><li class="outlineSectionEntry"><a href="#codetools">Tools for Brimstone code contributors</a></li><li class="outlineSectionEntry"><a href="#codetips">Tips for Brimstone code contributors</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="naming"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Code naming conventions</span></div><div id="ID0RBSection" class="collapsibleSection"><p><span class="code">Public</span>, <span class="code">internal</span> and <span class="code">protected</span> classes and members should use <strong>UpperCamelCase</strong>.
        </p><p><span class="code">Private</span> members should use <strong>_underscoreCamelCase</strong>.
        </p><p>
          Local variables should use <strong>camelCase</strong>.
        </p><p><span class="code">Interface</span> definitions should start with the letter <span class="code">I</span>.
        </p><p>
          Filenames should generally be named after the primary class they define.
        </p></div><div class="collapsibleAreaRegion" id="formatting"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Code formatting conventions</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Each indent level should use a single tab, not spaces. We use 4-character width tabs by default.
        </p><p>
          Lines should end in a single linefeed (LF) with no preceding carriage return (CR).
        </p><p>
          There should be no double-newlines, every file should end in a single newline, and there should be newlines between class and method definitions. Fields and properties which are related can be placed with no newlines between them if desired. There should be no trailing whitespace at the end of lines. For example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EATAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EATAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EATAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EATAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">class</span> Foo
{
  <span class="highlight-keyword">private</span> <span class="highlight-keyword">int</span> _myProperty;
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> MyProperty ...

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> RelatedProperty1 ...
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> RelatedProperty2 ...

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> AnUnrelatedProperty ...

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> MyMethod() {
    ...
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> AnotherMethod() {
    ...
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EATAGAAA");</script><p><span class="code">using</span> declarations should be in alphabetical order starting with .NET Framework namespaces then any 3rd party namespaces, then Brimstone namespaces. Unnecessary <span class="code">using</span>s should be removed.
        </p><p><span class="code">namespace</span>s and <span class="code">class</span>es should use opening and closing curly braces on separate lines after the definition line, ie.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAQAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAQAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAQAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAQAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">class</span> Foo
{
  <span class="highlight-comment">// Code</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAQAGAAA");</script><p>
          Everything except namespace and class definitions should use the K&amp;R style: opening curly brace at the end of the definition line with one space before it, and the closing brace on a separate line. For example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAOAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAOAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAOAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAOAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> MyMethod(<span class="highlight-keyword">int</span> x) {
  <span class="highlight-keyword">return</span> x * <span class="highlight-number">2</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAOAGAAA");</script><p>
          Control blocks with a single statement may have their curly braces ommitted.
        </p><p>
          Pre-processor directives such as <span class="code">#define</span> should always go at the start of the line with no leading whitespace.
        </p><p>
          Comments at the start of files should go before any <span class="code">using</span> directives.
        </p><p>
          Properties should not use a private backing field unless required.
        </p><p>
          No <span class="code">public</span> members of any class should be fields. Always use properties instead.
        </p><p><span class="code">get</span>-only properties should use expression bodies where possible, for example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAHAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAHAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> SomeProperty =&gt; <span class="highlight-keyword">true</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHAGAAA");</script><p>
          All public members should have XML comments with one blank line above the start of the comments and no blank lines between the end of the comments and the start of the member. Comments should be triple-slashed (<span class="code">///</span>). XML comments should include at least a <span class="code">&lt;summaary&gt;</span>, <span class="code">&lt;param&gt;</span> list (where appropriate) and a <span class="code">&lt;returns&gt;</span> block where appropriate. Place any longer description or special notes in a <span class="code">&lt;remarks&gt;</span> block.
        </p><p>
          The order in which <span class="code">class</span> members should appear is as follows:
        </p><ol><li><p>Private constants</p></li><li><p>Public constants</p></li><li><p>Public properties</p></li><li><p>Private and internal properties</p></li><li><p>Protected properties</p></li><li><p>Public, private and internal methods can be in mixed order and should be grouped together according to relevance, for example a protected implementation override for a public method should be defined immediately above the public method</p></li><li><p>
              When used, system-defined interface implementations in the order: <strong>IEnumerable</strong> (GetEnumerator), <strong>System.Object</strong> (Equals, GetHashCode and ToString), <strong>IFormatProvider</strong> (ToString), <strong>IDisposable</strong> (Dispose), <strong>ICloneable</strong> (Clone)
            </p></li><li><p>Explicit interface instantiations should go immediately above the non-explicit implementation</p></li></ol><p>
          Use the <span class="code">null</span> ternary operator rather than <span class="code">if</span> statements, for example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Bad</span>
<span class="highlight-keyword">var</span> foo = (bar != <span class="highlight-keyword">null</span>? bar : <span class="highlight-number">123</span>);

<span class="highlight-comment">// Good</span>
<span class="highlight-keyword">var</span> foo = bar ?? <span class="highlight-number">123</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACAGAAA");</script><p>
          Use <span class="code">null</span> propagation rather than <span class="code">if</span> statements, for example:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Bad</span>
<span class="highlight-keyword">if</span> (foo != <span class="highlight-keyword">null</span>)
  foo.Method();
<span class="highlight-keyword">var</span> arrayItem = (myArray == <span class="highlight-keyword">null</span>? <span class="highlight-keyword">null</span> : myArray[<span class="highlight-number">3</span>]);
<span class="highlight-keyword">if</span> (myEvent != <span class="highlight-keyword">null</span>)
  myEvent();

<span class="highlight-comment">// Good</span>
foo?.Method();
<span class="highlight-keyword">var</span> arrayItem = myArray?[<span class="highlight-number">3</span>];
myEvent?.Invoke();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAAGAAA");</script></div><div class="collapsibleAreaRegion" id="patterns"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Brimstone design patterns</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Actions and the action queue</h4><div class="subsection"><p>
              Never run an action immediately except when writing a method on an entity type used directly as an API call, for example <span class="nolink">Play</span>, in which case the action should always run immediately. Actions generated from within other actions <strong>MUST</strong> be queued otherwise the code will deadlock. If you need to add more behaviour that runs after the queued item, queue a continuation function using <span class="nolink">Func</span>.
            </p><p>
              Always use <span class="nolink">Game.Action(IEntity, ActionGraph)</span> or <span class="nolink">Game.Queue(IEntity, ActionGraph)</span> to add items to the action queue.
            </p><p>
              When creating new actions, never include fields or properties which are not value types as this will break cloning.
            </p><p>
              When creating new actions, always name each argument index with an all-caps <span class="code">public static int</span> declaration. Follow the naming conventions used in other defined Actions.
            </p></div><h4 class="subHeading">Entities and tag manipulation</h4><div class="subsection"><p>
              Always prefer to use the various entity interface types than concrete entity types where possible when working with entities. This helps to reduce the number of casts end-users need to make.
            </p><p>
              Never store entity references (to <span class="nolink">IEntity</span>) directly as it complicates cloning. Instead, store the entity's ID as an integer instead (<span class="nolink">IEntity.Id</span>) and use the <span class="nolink">Game.Entities</span> indexer to locate the entity when you need to resolve the reference. This counts only for objects which need to be cloned. For non-cloneable objects, feel free to use entity references directly.
            </p><p>Never read or set tags directly in non-core code with the entity indexer. Always use the tag properties instead to ensure proper type conversion and trigger execution.</p><p>In core code (for example, zone management) where you may want to alter an entity's tags without firing triggers, set the tag via the entity's indexer.</p></div><h4 class="subHeading">Behaviours</h4><div class="subsection"><p>
              Always use the static methods and properties in <span class="nolink">Behaviours</span> to create actions. Never create <span class="nolink">QueueAction</span> objects directly.
            </p><p>
              When creation actions with some arguments missing, always use the named argument syntax to specify the particular arguments you are supplying. Failure to do this will make the action queue crash.
            </p><p>
              Never fill in missing arguments when defining new behaviours. Always make every argument optional, with a default value of <span class="code">null</span>.
            </p></div><h4 class="subHeading">XML documentation</h4><div class="subsection"><p>
              Never copy &amp; paste XML documentation from a base class or interface to a derived class or implementation. Instead use, the Sandcastle custom XML tag <span class="code">&lt;inheritdoc /&gt;</span> as the only XML comment. This will cause the base documentation to be automatically inherited.
            </p></div><h4 class="subHeading">General</h4><div class="subsection"><p>
              Never throw generic exceptions. Always throw an exception derived from <span class="nolink">BrimstoneException</span>. The exception is <a href="http://msdn2.microsoft.com/en-us/library/6byb74h9" target="_self">NotImplementedException</a> which may be used in stub code that has not been fully implemented yet.
            </p><p>
              When creating collections that may require cloning, always use collection classes from <a href="http://msdn2.microsoft.com/en-us/library/dn440415" target="_self">System.Collections.Immutable</a>.
            </p><p>
              Always prefer Linq statements over <span class="code">foreach</span> loops. Always prefer to return an <a href="http://msdn2.microsoft.com/en-us/library/9eekhta0" target="_self">IEnumerable<span id="LSTACFCFADF_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTACFCFADF_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTACFCFADF_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTACFCFADF_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> over a concrete collection. Always prefer <span class="code">yield return</span> over sequential iteration. Always use the Linq <a href="http://msdn2.microsoft.com/en-us/library/bb356089" target="_self">Any</a> method instead of <a href="http://msdn2.microsoft.com/en-us/library/bb357758" target="_self">Count</a> on non-concrete collections. Use the regular <a href="http://msdn2.microsoft.com/en-us/library/27b47ht3" target="_self">Count</a> property on concrete collections. These patterns improve the performance of Brimstone for cases where not every item in a collection will be iterated. Linq also uses lazy evaluation such that the expression is only evaluated when iteration starts, and only for the iterated elements.
            </p><p>
              When implementing <a href="http://msdn2.microsoft.com/en-us/library/hdf3zaf2" target="_self">System<span id="LSTACFCFADF_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTACFCFADF_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ICloneable</a>, the <a href="http://msdn2.microsoft.com/en-us/library/9a2kzf4y" target="_self">Clone</a> method should merely call the a class copy constructor which takes the existing object as its only argument and clones it.
            </p></div></div><div class="collapsibleAreaRegion" id="unittest"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Running unit tests</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Brimstone's unit tests are written using the NUnit Fremework. To run the tests in Visual Studio, you must install the <strong>NUnit Test Adapter</strong> from the <strong>Tools -&gt; Extensions and Updates...</strong> window. Once you have done this, build the solution and open <strong>Test Explorer</strong>  via the <strong>Test -&gt; Windows -&gt; Test Explorer</strong> menu option. Click <strong>Run All</strong> to run the tests.
        </p><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Important note" /> Important</th></tr><tr><td><p>Always run unit tests in Release build configuration. Do not submit pull requests with failing tests without prior approval.</p></td></tr></table></div><p>
          If you need to debug one of your tests, switch to Debug build configuration, set a breakpoint in the code, right-click your failing test and choose <strong>Debug Selected Tests</strong>.
        </p></div><div class="collapsibleAreaRegion" id="profiling"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Benchmarking and profiling</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
          You must benchmark your code if it may have a detrimental performance impact. Please see <a href="f230a982-28b6-4fd1-b0ce-c3decd883ab4.htm">Walkthrough: Benchmarking a single build</a> for information on how to benchmark and profile your code changes.
        </p></div><div class="collapsibleAreaRegion" id="codetools"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Tools for Brimstone code contributors</span></div><div id="ID6RBSection" class="collapsibleSection"><p>There are a number of tools that can be used to help you meet the style and documentation guidelines with minimal effort:</p><ul><li><p><strong>Git Diff Margin</strong> is a free Visual Studio extension that shows adds, changes and deletions to each uncommitted file in the text editor scrollbar margin. It can be installed from the <strong>Tools -&gt; Extensions and Updates...</strong> window and requires no additional setup.
            </p></li><li><p><strong>ReSharper</strong> is a commercial tool that lets you specify automatically applied naming formatting rules and can also automatically apply basic code optimizations for you. It will also show you a colour-coded summary of any problems in your code in the scrollbar margin.
            </p></li><li><p><strong>Visual Studio's text editor settings</strong> also allow you to specify formatting rules. They can be accessed via the <strong>Tools -&gt; Options -&gt; Text Editor -&gt; C# -&gt; Formatting</strong> dialog.
            </p><div class="mediaNear"><div class="caption">Visual Studio Formatting Options</div><img alt="Visual Studio Formatting Options" src="../media/VisualStudioFormattingOptions.png" /></div></li><li><p><strong>End of The Line</strong> is a free Visual Studio extension that shows LF and CRLF line endings in your code. It can be installed from the <strong>Tools -&gt; Extensions and Updates...</strong> window. Line endings should be commited as LF only. End of The Line adds the menu option <strong>Edit -&gt; Advanced -&gt; Make Line Endings LF</strong> to ensure that any files you modify have the correct line endings.
            </p></li><li><p>
              The <strong>NUnit Test Project Template</strong> and <strong>Test Generator NUnit Extension</strong> are free Visual Studio extensions which allow you to create new NUnit test classes easily. They add project templates to Visual Studio's <strong>File -&gt; New Project...</strong> dialog.
            </p></li><li><p><strong>GhostDoc</strong> is a free Visual Studio extension which automatically generates XML documentation for you. You can download it       <a href="http://submain.com/products/ghostdoc.aspx" target="_blank">here</a>.
            </p></li></ul></div><div class="collapsibleAreaRegion" id="codetips"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Tips for Brimstone code contributors</span></div><div id="ID7RBSection" class="collapsibleSection"><p>The following keyboard shortcuts can save you lots of time:</p><ul><li><p><strong>Ctrl+.</strong> - show quick fixes for the code under the cursor. This allows you to quickly insert missing <span class="code">using</span> statements and so on. If you have ReSharper installed, it can also simplify statements by using null propagation, expression bodies, merge Linq queries, and fix casting issues.
            </p></li><li><p><strong>Ctrl+R, Ctrl+R</strong> - renames all occurrences of a code element. If you have ReSharper installed, it can also rename overloads and update comments.
            </p></li><li><p><strong>Ctrl+K, Ctrl+D</strong> - if you have code formatting set up correctly, this will format the entire document to match the style guidelines automatically.
            </p></li><li><p><strong>F7</strong> - rebuilds the solution
            </p></li><li><p><strong>Ctrl+F5</strong> - builds the current startup project and any dependencies and runs it
            </p></li><li><p><strong>F5</strong> - starts the current startup project in the debugger (use F10 to step over a statement and F11 to step into a statement)
            </p></li><li><p><strong>Ctrl+Shift+F9</strong> - deletes all breakpoints
            </p></li><li><p><strong>Alt+F2, Enter</strong> - starts the performance profiler for the current startup project
            </p></li></ul></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID8RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="http://submain.com/products/ghostdoc.aspx" target="_blank">GhostDoc download</a></div><div class="seeAlsoStyle"><a href="https://www.jetbrains.com/resharper" target="_blank">ReSharper download (trial version)</a></div></div></div></div><div id="pageFooter" class="pageFooter"><a href="http://discord.me/hearthstoneworkinggroup">Join us on Discord</a><br /><p>Hearthstone Working Group 2016 - Part of HearthSim.info</p></div></body></html>