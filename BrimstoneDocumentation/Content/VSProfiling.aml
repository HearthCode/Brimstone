<?xml version="1.0" encoding="utf-8"?>
<topic id="8d25a5f6-350d-4ebb-9a3b-1cb6a60cf573" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>This walkthrough explains how to profile Brimstone code using Visual Studio Code Analysis on Windows.</para>
    </summary>

    <introduction>
      <autoOutline lead="In this section:"/>
    </introduction>

    <prerequisites>
      <content>
        <para>
          This guide was written for Visual Studio 2015, but should be compatible with any other version of Visual Studio providing Code Analysis.
        </para>
      </content>
    </prerequisites>

    <procedure>
      <title>To profile Brimstone or a Brimstone application</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Right-click the project you would like to run in <legacyBold>Solution Explorer</legacyBold> and choose <legacyBold>Set as StartUp Project</legacyBold>. Ensure you are in <legacyBold>Release</legacyBold> build configuration.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Press <legacyBold>Alt+F2</legacyBold> or choose <legacyBold>Analyze -> Performance Profiler...</legacyBold> from the main menu to open the <legacyBold>Analysis Target</legacyBold> window.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Ensure that <legacyBold>CPU Usage</legacyBold> is the only ticked option and click <legacyBold>Start</legacyBold> or press <legacyBold>Enter</legacyBold>.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              When the application has finished running, Visual Studio will after some moments display the <legacyBold>Diagnostics Session</legacyBold> window. Click the link which says <legacyBold>Create detailed report...</legacyBold>. This may take several minutes to run.
            </para>
            <mediaLink>
              <image xlink:href="VSProfileDiagnostics"/>
            </mediaLink>
            <mediaLink>
              <image xlink:href="VSProfileSampleReport"/>
            </mediaLink>
          </content>
        </step>
        <step>
          <content>
            <para>
              You will now see the <legacyBold>Sample Profiling Report</legacyBold> window. From the <legacyBold>Current View</legacyBold> drop-down, select <legacyBold>Functions</legacyBold>.
            </para>
            <mediaLink>
              <image xlink:href="VSProfileFunctions"/>
            </mediaLink>
            <para>
              This window shows the amount of run-time each function used. There are two primary measurements: the <legacyBold>Exclusive Samples %</legacyBold> figure reports how much run-time a single function took, not including any functions it calls. This can be used to find individual functions that may be causing bottlenecks and see which functions perform the most work. The <legacyBold>Inclusive Samples %</legacyBold> figure reports how much run-time a single function plus all of the functions it called took. This can be used to see what higher level portions of activity are the most time-consuming.
            </para>
            <para>
              In the example above, we can see that 68.68% of the test application's time was spent performing actions and 23.65% of the time was spent cloning. Some of those actions caused all the cloning to occur, so by deduction we can observe that running all of the actions not related to cloning consumed about 45% of the run-time.
            </para>
            <para>
              We also see that death creation took 40% of the run-time (as part of running actions, as this is the only time the death creation step can run), which seems abnormally high. We can double-click on it to find out more.
            </para>
          </content>
        </step>
        <step>
          <content>
            <mediaLink>
              <image xlink:href="VSFunctionDetails1"/>
            </mediaLink>
            <para>
              When you double-click an item in the <legacyBold>Functions</legacyBold> view, you will be taken to the <legacyBold>Function Details</legacyBold> view as shown above (you can use the back arrow within the profiling report to navigate backwards and forwards). Here we see that fetching an entity's zone takes 7.8% of the entire run-time. This could mean that fetching the zone is slow, or it could simply mean that we have made a very high number of requests to fetch the <codeInline>Zone</codeInline> property. To find out which is the case, we can click on one of the <legacyBold>Calling functions</legacyBold> to investigate further.
            </para>
            <mediaLink>
              <image xlink:href="VSFunctionDetails2"/>
            </mediaLink>
            <para>
              Here we have clicked on <codeInline>get_FuzzyGameHash</codeInline>. We see that checking the entity's zone is in fact very slow compared to the rest of the code. Whether <codeInline>get_FuzzyGameHash</codeInline> is called once or a million times, fetching the entity's zone (and zone position) is by far the slowest part of the function. The rest of the function is quite performant, using very little total run-time. Therfore, we can conclude in this case that fetching an entity's zone is a good candidate for optimization.
            </para>
          </content>
        </step>
      </steps>
    </procedure>

    <relatedTopics>
      <link xlink:href="3867a7e4-21e2-4e3b-934b-c1c4ae15efa9" />
      <link xlink:href="f230a982-28b6-4fd1-b0ce-c3decd883ab4" />
      <link xlink:href="4b0b00d6-f9a1-4eae-b880-892eb0d513fb" />
      <link xlink:href="c5beb99b-5b2f-4287-b2e8-c787a10399eb" />
      <codeEntityReference qualifyHint="true">T:Brimstone.Settings</codeEntityReference>
      <externalLink>
        <linkText>BrimstoneProfiler repository homepage</linkText>
        <linkUri>https://github.com/HearthSim/BrimstoneProfiler</linkUri>
        <linkTarget>_blank</linkTarget>
      </externalLink>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
