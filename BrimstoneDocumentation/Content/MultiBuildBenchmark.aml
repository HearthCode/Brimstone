<?xml version="1.0" encoding="utf-8"?>
<topic id="4b0b00d6-f9a1-4eae-b880-892eb0d513fb" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>This walkthrough explains how to benchmark multiple builds of Brimstone stored in consecutive repository commits.</para>
    </summary>

    <introduction>
      <alert class="important">
        <para>
          Multi-commit benchmarking uses MSBuild to re-compile <codeInline>benchmarks.exe</codeInline> for each build and is not compatible with Mono.
        </para>
      </alert>
      <para>
        Brimstone provides the <codeInline>profiler.exe</codeInline> command-line tool to run the same benchmarks across multiple commits. It works as follows:
      </para>
      <list class="ordered">
        <listItem>
          <para>
            For each commit to benchmark, the commit is checked out in a detached HEAD state, its NuGet packages are restored, the Brimstone library is built from the checked out solution and the <legacyBold>Benchmarks</legacyBold> project is built using the newly compiled library as the reference to <codeInline>Brimstone.dll</codeInline>.
          </para>
        </listItem>
        <listItem>
          <para>
            <codeInline>benchmarks.exe</codeInline> is run for the commit
          </para>
        </listItem>
        <listItem>
          <para>
            The <codeInline>benchmarks.csv</codeInline> output file is parsed and stored
          </para>
        </listItem>
        <listItem>
          <para>
            When all of the commits have been benchmarked, the results for every commit are written to a table in <codeInline>profiler.csv</codeInline>
          </para>
        </listItem>
      </list>
    </introduction>

    <prerequisites>
      <content>
        <para>
          To benchmark a series of builds, you will need a basic understanding of <legacyBold>git</legacyBold>.
        </para>
        <para>
          Ensure you have built <legacyBold>BrimstoneProfiler</legacyBold> as explained in <link xlink:href="3867a7e4-21e2-4e3b-934b-c1c4ae15efa9" /> before you begin. For multi-build benchmarking, you only need to build the <legacyBold>Profiler</legacyBold> project, and the version of <codeInline>Brimstone.dll</codeInline> referenced in the <legacyBold>Benchmarks</legacyBold> project does not matter.
        </para>
        <alert class="important">
          <para>
            For multi-build benchmarking to work, the <legacyBold>Brimstone</legacyBold> and <legacyBold>BrimstoneProfiler</legacyBold> folders must be placed together in the same parent folder.
          </para>
        </alert>
        <alert class="warning">
          <para>
            Ensure you have no uncommitted changes to your <legacyBold>Brimstone</legacyBold> repository folder before running multi-build benchmarks. Running the benchmark suite checks out different commits in your repository folder. If you have uncommitted changes, they may be overwritten or the benchmark suite may fail to work correctly. When the benchmark suite finishes running, check out the commit you were originally working on again.
          </para>
        </alert>
        <alert class="tip">
          <para>
            You can save unstaged or uncommitted changes to your working folder without making a commit by typing <codeInline>git stash</codeInline> at the command prompt. This will save them in the git stash and return your working folder to the state it was in when you checked out the branch. Type <codeInline>git stash pop</codeInline> to restore your changes.
          </para>
        </alert>
      </content>
    </prerequisites>

    <procedure>
      <title>To benchmark multiple builds of Brimstone together</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Open a command prompt from which to run the benchmarks and navigate to the folder containing the compiled <codeInline>profiler.exe</codeInline> tool.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Select a range of commits to benchmark. You can view the commit IDs for the current branch by typing <codeInline>git log --oneline</codeInline>. The commit IDs are shown as 7-digit (or longer) hexadecimal numbers.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Start the benchmarks by typing <codeInline>profiler --commit-range=oldest-commit-id,newest-commit-id</codeInline>. If you omit <codeInline>newest-commit-id</codeInline>, benchmarks will run from the specified commit up to and including the most recent commit on the current branch. The default settings for <codeInline>benchmarks.exe</codeInline> will be used for each run.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              When the benchmarks have finished running, the output can be found in CSV format in <codeInline>profiler.csv</codeInline> in the working folder.
            </para>
          </content>
        </step>
      </steps>
    </procedure>

    <procedure>
      <title>To specify benchmarking options for each build</title>
      <steps class="bullet">
        <step>
          <content>
            <para>
              You can use all of the benchmarking options that would be passed to <codeInline>benchmarks.exe</codeInline> as described in <link xlink:href="f230a982-28b6-4fd1-b0ce-c3decd883ab4" /> as options to <codeInline>profiler.exe</codeInline>. These options will be applied to every build when the benchmarks are run.
            </para>
            <alert class="note">
              <para>
                If you specify more than one run for each individual benchmark using multiple <codeInline>--unset</codeInline> options, all but the first will be ignored when aggregating the results - the rest will be ignored.
              </para>
            </alert>
          </content>
        </step>
      </steps>
    </procedure>

    <procedure>
      <title>To view compiler output when building each commit</title>
      <steps class="bullet">
        <step>
          <content>
            <para>
              In the event that building fails, you can check the compiler output by using the <codeInline>--compiler-output</codeInline> flag. Note that this produces a lot of output.
            </para>
          </content>
        </step>
      </steps>
    </procedure>

    <procedure>
      <title>To change the search path for the Brimstone solution files</title>
      <steps class="bullet">
        <step>
          <content>
            <para>
              By default, the current directory and all parent directories are searched for the <codeInline>Brimstone</codeInline> and <codeInline>BrimstoneProfiler</codeInline> solution folders. To specify a different path, use the <codeInline>--base-path</codeInline> option.
            </para>
          </content>
        </step>
      </steps>
    </procedure>

    <procedure>
      <title>To import benchmarks as an Excel chart</title>
      <steps class="ordered">
        <step>
          <content>
            <alert class="note">
              <para>This instructions are for Excel 2016 but should work all versions from Excel 2010 and later.</para>
            </alert>
            <para>
              Open Excel and drag <codeInline>profiler.csv</codeInline> into it.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Drag a box around the table including the header but excluding the build line, and press <legacyBold>CTRL+T</legacyBold> or choose <legacyBold>Insert -> Table</legacyBold> from the ribbon bar. Tick <legacyBold>My table has headers</legacyBold> and click OK.
            </para>
            <mediaLink>
              <image xlink:href="ExcelBenchmarksMultiInsertTable"/>
            </mediaLink>
          </content>
        </step>
        <step>
          <content>
            <para>
              Click <legacyBold>Insert -> Recommended Charts</legacyBold> from the ribbon bar and choose the desired chart type. For unrelated benchmarks, <legacyBold>Clustered Bar</legacyBold> and <legacyBold>Clustered Column</legacyBold> are generally the best options. If you ran a single benchmark across multiple builds, the <legacyBold>Line</legacyBold> chart shows performance improvement and degradation across each build.
            </para>
            <mediaLink>
              <image xlink:href="ExcelBenchmarksMultiInsertChart"/>
            </mediaLink>
            <mediaLink>
              <image xlink:href="ExcelBenchmarksMultiSingleInsertChart"/>
            </mediaLink>
          </content>
        </step>
        <step>
          <content>
            <para>
              You can easily style the chart by selecting <legacyBold>Design</legacyBold> from the ribbon and clicking on one of the pre-defined chart styles.
            </para>
            <mediaLink>
              <image xlink:href="ExcelBenchmarksMultiStyleChart"/>
            </mediaLink>
          </content>
        </step>
      </steps>
    </procedure>

    <relatedTopics>
      <link xlink:href="3867a7e4-21e2-4e3b-934b-c1c4ae15efa9" />
      <link xlink:href="f230a982-28b6-4fd1-b0ce-c3decd883ab4" />
      <link xlink:href="c5beb99b-5b2f-4287-b2e8-c787a10399eb" />
      <link xlink:href="8d25a5f6-350d-4ebb-9a3b-1cb6a60cf573" />
      <codeEntityReference qualifyHint="true">T:Brimstone.Settings</codeEntityReference>
      <externalLink>
        <linkText>BrimstoneProfiler repository homepage</linkText>
        <linkUri>https://github.com/HearthSim/BrimstoneProfiler</linkUri>
        <linkTarget>_blank</linkTarget>
      </externalLink>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
