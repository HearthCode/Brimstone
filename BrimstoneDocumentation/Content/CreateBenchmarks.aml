<?xml version="1.0" encoding="utf-8"?>
<topic id="c5beb99b-5b2f-4287-b2e8-c787a10399eb" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>This walkthrough explains how to create a new benchmark for Brimstone.</para>
    </summary>

    <introduction>
      <autoOutline lead="In this section:"/>
    </introduction>

    <prerequisites>
      <content>
        <para>
          The <legacyBold>BrimstoneProfiler</legacyBold> repository contains the tools required to benchmark Brimstone applications. You must have a clone of this repository present on your local machine to run benchmarks.
        </para>
      </content>
    </prerequisites>

    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>To create a new benchmark</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Create a new function in <codeInline>Benchnarks/BenchmarkDefinitions.cs</codeInline> to implement the benchmark using the following signature:
            </para>
            <code language="cs">
              public void Test_MyTestName(Game g, int it) {
                // test code here
              }
            </code>
            <para>
              <codeInline>g</codeInline> is the <codeEntityReference qualifyHint="false" autoUpgrade="true">T:Brimstone.Entities.Game</codeEntityReference> object on which to perform the benchmark, and <codeInline>it</codeInline> is the number of iterations to perform. Note that it is up to the benchmark writer to ensure the correct number of iterations are run, eg. with a <codeInline>for</codeInline> loop.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Define the starting game. By default, the game will be created by calling <codeInline>Default_Setup</codeInline> in <codeInline>BenchmarkDefinitions.cs</codeInline> before the benchmark function is called. If you wish to override this, create a new game creation function as follows:
            </para>
            <code language="cs">
              public static Game Setup_MyGame() {
                // game creation code
                return myGame;
              }
            </code>
            <para>
              Do not call <codeEntityReference qualifyHint="true" autoUpgrade="true">M:Brimstone.Entities.Game.Start(System.Int32,System.Boolean,System.Boolean)</codeEntityReference> in your setup function.
            </para>
            <alert class="tip">
              <para>
                <codeInline>Benchmarks</codeInline> provides the <codeInline>NewEmptyGame</codeInline>, <codeInline>NewPopulatedGame</codeInline> and <codeInline>NewScenarioGame</codeInline> static helper methods to allow you to create games quickly. See the <codeInline>Benchmarks/Program.cs</codeInline> source code for details.
              </para>
            </alert>
          </content>
        </step>
        <step>
          <content>
            <para>
              Declare the benchmark. The <codeInline>Tests</codeInline> dictionary defined at the top of <codeInline>BenchmarkDefinitions.cs</codeInline> declares all of the benchmarks with the following fields:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  Short name of the test. This is the name that can be filtered on using the <codeInline
>--filter</codeInline> switch when you run <codeInline>benchmarks.exe</codeInline>.
                </para>
              </listItem>
              <listItem>
                <para>Full name of the test, used in the CSV output and as a descriptive identifier of the test's purpose.</para>
              </listItem>
              <listItem>
                <para>The method to call to execute the test.</para>
              </listItem>
              <listItem>
                <para>
                  [Optional] The game setup function to run before the test. If not specified, <codeInline>Default_Setup</codeInline> is used.
                </para>
              </listItem>
              <listItem>
                <para>
                  [Optional] The number of iterations to run. If not specified, this defaults to <codeInline>DefaultIterations</codeInline> defined in <codeInline>BenchmarkDefinitions.cs</codeInline>.
                </para>
              </listItem>
            </list>
          </content>
        </step>
        <step>
          <content>
            <para>
              Re-compile <legacyBold>Benchmarks</legacyBold> and run at the command-line as described in <link xlink:href="f230a982-28b6-4fd1-b0ce-c3decd883ab4" /> to view the results.
            </para>
          </content>
        </step>
      </steps>
    </procedure>

    <relatedTopics>
      <link xlink:href="3867a7e4-21e2-4e3b-934b-c1c4ae15efa9" />
      <link xlink:href="f230a982-28b6-4fd1-b0ce-c3decd883ab4" />
      <link xlink:href="4b0b00d6-f9a1-4eae-b880-892eb0d513fb" />
      <link xlink:href="8d25a5f6-350d-4ebb-9a3b-1cb6a60cf573" />
      <codeEntityReference qualifyHint="true">T:Brimstone.Settings</codeEntityReference>
      <externalLink>
        <linkText>BrimstoneProfiler repository homepage</linkText>
        <linkUri>https://github.com/HearthSim/BrimstoneProfiler</linkUri>
        <linkTarget>_blank</linkTarget>
      </externalLink>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
